plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.da-thao'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.netflix.graphql.dgs.codegen:graphql-dgs-codegen-gradle:6.2.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('create-controller') {
    doLast {
        def controllerName = project.findProperty('Controller') ?: 'DefaultController'
        def modelName = project.findProperty('Model') ?: 'DefaultModel'
        def requestName = project.findProperty('Request') ?: 'DefaultRequest'
        def template = """
package com.da_thao.project_test.controller.impl;

import com.da_thao.project_test.dto.ApiResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.da_thao.project_test.controller.RestControllerInterface;
import com.da_thao.project_test.dto.response_data.HandleResponseData;

import java.util.List;


@AllArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RestController
@RequestMapping("/api/")
public class ${controllerName} implements RestControllerInterface<${modelName}, ${requestName}> {
HandleResponseData res;

@GetMapping
@Override
public ResponseEntity<ApiResponse<List<${modelName}>>> getAll(@RequestParam  ${requestName} requestParam) {
    // TODO: Implement logic here
    return null;
}

@GetMapping("/{id}")
@Override
public ResponseEntity<ApiResponse<${modelName}>> findById(@PathVariable Integer id) {
    // TODO: Implement logic here
    return null;
}

@PostMapping
@Override
public ResponseEntity<ApiResponse<${modelName}>> create(@RequestBody  ${modelName} model) {
    // TODO: Implement logic here
    return null;
}

@DeleteMapping("/{id}")
@Override
public ResponseEntity<ApiResponse<Void>> delete(@PathVariable Integer id) {
    // TODO: Implement logic here
    return null;
}

@PutMapping("/{id}")
@Override
public ResponseEntity<ApiResponse<${modelName}>> update(@PathVariable Integer id, @RequestBody  ${modelName} model) {
    // TODO: Implement logic here
    return null;
}
}
"""
        def file = new File("src/main/java/com/da_thao/project_test/controller/impl/${controllerName}.java")
        file.parentFile.mkdirs()
        file.write(template)
        println "Controller created success at: ${file.absolutePath}"
    }
}




tasks.register('create-model') {
    doLast {
        def modelName = project.findProperty('Model') ?: 'DefaultModel'

        def template = """
package com.da_thao.project_test.model;

import lombok.*;
import lombok.experimental.FieldDefaults;

@AllArgsConstructor
@NoArgsConstructor
@Setter
@Getter
@FieldDefaults(level = AccessLevel.PRIVATE)
@Builder
public class ${modelName} {
  //all property here
}
"""

        def file = new File("src/main/java/com/da_thao/project_test/model/${modelName}.java")
        file.parentFile.mkdirs()
        file.write(template)
        println "Model created successfully at: ${file.absolutePath}"
    }
}

tasks.register('create-request') {
    doLast {
        def requestName = project.findProperty('Request') ?: 'DefaultRequest'
        def modelName = project.findProperty('Model') ?: 'DefaultModel'

        def template = """
package com.da_thao.project_test.request_param.vaild_request.impl;

import com.da_thao.project_test.exception.ApiException;
import com.da_thao.project_test.dto.code_response.impl.ErrorCode;
import com.da_thao.project_test.model.${modelName};
import com.da_thao.project_test.request_param.vaild_request.RequestInterface;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

@Component
@Primary
public class ${requestName} implements RequestInterface<${modelName}> {
    @Override
    public boolean checkRequest(${modelName} requestData) {
        Map<String, String> detailError = new HashMap<>();

        if (requestData == null)  detailError.put("${modelName}", "${modelName} object is null!");

        assert requestData != null;
        // Add validation logic for ${modelName} here, e.g.:
        // if (requestData.getName() == null || requestData.getName().isEmpty())
        //    detailError.put("name", "${modelName} name is null or empty!");

        if (!detailError.isEmpty()) {
            throw new ApiException(ErrorCode.CREATE_FAILED, detailError);
        }

        return true;
    }
}
"""

        def file = new File("src/main/java/com/da_thao/project_test/request_param/vaild_request/impl/${requestName}.java")
        file.parentFile.mkdirs()
        file.write(template)
        println "Request created successfully at: ${file.absolutePath}"
    }
}


tasks.register('create-repository') {
    doLast {
        def repositoryName = project.findProperty('Repository') ?: 'DefaultRepository'
        def modelName = project.findProperty('Model') ?: 'Example'
        def requestName = project.findProperty('Request') ?: 'ExampleRequest'

        def template = """
package com.da_thao.project_test.repository.impl;

import com.da_thao.project_test.model.${modelName};
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Repository;

import java.util.List;

@Primary
@Repository
public class ${repositoryName} implements InterfaceRepository<${modelName}, ${requestName}> {

    @Override
    public List<${modelName}> getAll(${requestName} requestParam) {
        return List.of();  // TODO: Implement get all logic
    }

    @Override
    public ${modelName} findById(Integer id) {
        return null;  // TODO: Implement find by ID logic
    }

    @Override
    public ${modelName} create(${modelName} ${modelName.toLowerCase()}) {
        return null;  // TODO: Implement create logic
    }

    @Override
    public Boolean delete(Integer id) {
        return null;  // TODO: Implement delete logic
    }

    @Override
    public ${modelName} update(Integer id, ${modelName} data) {
        return null;  // TODO: Implement update logic
    }
}
"""

        def file = new File("src/main/java/com/da_thao/project_test/repository/impl/${repositoryName}.java")
        file.parentFile.mkdirs()
        file.write(template)
        println "Repository created successfully at: ${file.absolutePath}"
    }
}


tasks.register('create-service') {
    doLast {
        def serviceName = project.findProperty('Service') ?: 'ExampleService'
        def modelName = project.findProperty('Model') ?: 'Example'
        def requestName = project.findProperty('Request') ?: 'ExampleRequest'

        def template = """
package com.da_thao.project_test.service.impl;

import com.da_thao.project_test.model.${modelName};
import com.da_thao.project_test.request_param.${requestName};
import com.da_thao.project_test.repository.InterfaceRepository;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;

import java.util.List;

@Primary
@Service
@AllArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class ${serviceName} implements InterfaceService<${modelName}, ${requestName}> {
    InterfaceRepository<${modelName}, ${requestName}> ${modelName.toLowerCase()}Repository;

    @Override
    public List<${modelName}> getAll(${requestName} requestParam) {
        return List.of();  // TODO: Implement get all logic
    }

    @Override
    public ${modelName} findById(Integer id) {
        return null;  // TODO: Implement find by ID logic
    }

    @Override
    public ${modelName} create(${modelName} ${modelName.toLowerCase()}) {
        return null;  // TODO: Implement create logic
    }

    @Override
    public Boolean delete(Integer id) {
        return null;  // TODO: Implement delete logic
    }

    @Override
    public ${modelName} update(Integer id, ${modelName} data) {
        return null;  // TODO: Implement update logic
    }
}
"""

        def file = new File("src/main/java/com/da_thao/project_test/service/impl/${serviceName}.java")
        file.parentFile.mkdirs()
        file.write(template)
        println "Service created successfully at: ${file.absolutePath}"
    }
}






